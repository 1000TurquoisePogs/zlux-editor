{
  "contents": "***********************************************************************\r\n*                   NAME ARRAYS SORTER (VERSION 2.8)                  *\r\n*---------------------------------------------------------------------*\r\n* FUNCTION   : COPY AND SORT THE INPUT USER RECORDS BY USER NAM, AND  *\r\n*              THEN OUTPUT THE SORTED RESULTS TO OUTPUT FILE.         *\r\n*                                                                     *\r\n*              NOTE:                                                  *\r\n*              1.THE INPUT AND OUTPUT USER RECORDS FILE ARE SPECIFIED *\r\n*                BY THE 'SYSUT1' AND 'SYSUT2' DDNAME DEFINED AT THE   *\r\n*                EXTERNAL JCL STATEMENT. AND THE RECORD FORMAT IS     *\r\n*                SPECIFIED BY 'MUREC' MACRO.                          *\r\n*              2.THE DEFAULT MAXIMUM NUMBER OF INPUTTING RECORDS TO   *\r\n*                BE SORTED IS 9999(DECIMAL), SPECIFIED BY 'REC_MAX'   *\r\n*                CONSTANT. YOU CAN OVERRIDE THE MAXIMUM NUMBER AT THE *\r\n*                JCL STATEMENT(WITHIN 9999). THE PROGRAM EXITS WHEN   *\r\n*                THE RECORDS NUMBER EXCEEDS THIS MAXIMUM NUMBER.      *\r\n*              3.THIS PROGRAM INVOKES ANOTHER MODULE TO SORT THE USER *\r\n*                RECORD ARRAYS BY USER NAME. TRANSFER THE PARAMETERS  *\r\n*                ADDRESS BY GPR1.                                     *\r\n*---------------------------------------------------------------------*\r\n* AUTHOR     : YONGJUN SUN                                            *\r\n* DATE       : JUL.28,2012 (LAST UPDATED)                             *\r\n* PROGRAM DSN: DVSUN.EXER.SORTNAME.ASM(SORTNAME)@CCAMVS1              *\r\n*---------------------------------------------------------------------*\r\n* HISTORY    :                                                        *\r\n*---VER--DATE--DESCRIPTION--------------------------------------------*\r\n*   1.0  JUN11 FIRSTLY CREATED.                                       *\r\n*   1.1  JUN12 REDEFINED THE INPUTTING NAME ARRAYS AND SOLVED THE     *\r\n*              ABEND PROBLEMS WHEN RUNNING IT.                        *\r\n*   1.2  JUN13 DEFINED THE CMPARR DSECT AREAS AND MODIFIED THE        *\r\n*              COMPARING STEPS BY ADDING THE USAGE OF DSECT.          *\r\n*   1.3  JUN14 MODIFIED THE PROBLEM OF OUTPUTTING ( THE FIRST 2 CHARS *\r\n*              OF OUTPUTTING MESSAGE WERE LOST ) AND ADDED THE USAGE  *\r\n*              OF BAKR/PR INSRUCTIONS INSTEAD OF STM/LM INSTRUCTIONS. *\r\n*   1.4  JUN15 ADDED EYE-CATCHER FUNCTION TO THE HEADER, REFINED THE  *\r\n*              INVOKING METHOD OF SUBROUTINES, SWAP-FLAG USAGE OF     *\r\n*              ARRAY COMPARISION, AND SUBROUTINES' COMMENT STYLE.     *\r\n*   1.5  JUN21 ADDED QUICK-SORT METHOD TO THIS PROGRAM.               *\r\n*   2.0  JUN25 ADDED HANDLERS TO SPECIFY THE FILES FOR INPUTTING AND  *\r\n*              OUTPUTTING.                                            *\r\n*   2.1  JUN27 DEVIDED THIS PROGRAM INTO TWO PARTS:THE CALLING MODULE *\r\n*              AND THE CALLED MODULE.                                 *\r\n*   2.2  JUN28 REFINED THE COMMENT STYLE TO BE NO BREAKING-WORDS, AND *\r\n*              EXTRACTED THE RTNOPN AND RTNCLS SUBROUTINES TO OPEN OR *\r\n*              CLOSE A FILE FROM MAINLINE.                            *\r\n*   2.3  JUN28 ADDED COMMENT TO LOGICAL BLOCKS AND REFINED THE LONG   *\r\n*              INSTRUCTIONS' COMMENTS TO BE MORE READABLE.            *\r\n*   2.4  JUL03 EXTRACTED RTNMSG SUBROUTINE TO DISPLAY(PRINT OUT) THE  *\r\n*              ERROR MESSAGE.                                         *\r\n*        JUL05 ADDED RTNALC SUBROUTINE TO DYNAMICALLY ALLOCATE A      *\r\n*              SUFFICIENT MEMORY FOR SAVING RECORDS AND A HANDLER TO  *\r\n*              DEAL WITH THE PARAMETER FROM CALLER.                   *\r\n*   2.5  JUL07 REFINED THE COPYING RECORDS WORK-FLOW AND EXTRACTED    *\r\n*              THE RTNMSG SUBROUTINE TO DISPLAY ERROR MESSAGEA FROM   *\r\n*              ALL RELATING PARTS.                                    *\r\n*   2.6  JUL11 CREATED THE 'MUREC' MACRO TO 'UREC' VARIABLES DSECT    *\r\n*              AREA TO TAKE INSTEAD OF THE 'REC_LEN' GLOBAL VARIABLE. *\r\n*        JUL13 IMPORTED THE 'TIME' MACRO TO GET THE RUNTIME WHEN      *\r\n*              DISPLAYING ERROR MESSAGES INSTEAD OF '&SYSDATE&SYSTIME'*\r\n*        JUL15 CREATED THE 'MPARMS' MACRO TO 'PARMS' DSECT AREA AS    *\r\n*              PARAMETERS LIST FOR CALLING THE EXTERNAL MODULES.      *\r\n*        JUL16 ADDED 'PALC' VARIABLES DSECT AREA AS PARAMTERS USED IN *\r\n*              INTERNAL SUBROUTINES INSTEAD OF SOME GLOBAL VARIABLES. *\r\n*   2.7  JUL17 MODIFIED THE MACROS REFERENCE STYLE, MOVED THE '_E'    *\r\n*              (END) AND THE '_L'(LENGTH) LABELS TO EXTERNAL MACROS   *\r\n*              DEFINATION AREA.                                       *\r\n*        JUL19 MOVED BAKR INSTRUCTION FROM CALLER PROGRAMS TO CALLEE  *\r\n*              PROGRAMS.                                              *\r\n*   2.8  JUL25 MODIFIED STORAGE MACOR PARAMTERS BY ADDING 'COND=YES', *\r\n*              REMOVED THE SUPERFLUOUS 'ST R13,4(,R14)' OPERATION AND *\r\n*              TEMPORARY SAVING OF GPR1 AS INPUT PARAMETER CONTAINER. *\r\n*        JUL27 RESET RETURN VALUES TO '4,8,12,16,20,24,28...' IN AN   *\r\n*              ORDINARY WAY TO TAKE INSTEAD OF '1,2,3,4,5,6,7,...'.   *\r\n*              MODIFIED THE COMMENTS STYLE TO DISTINGUISH THE LOGICAL *\r\n*              PARTS, SUBROUTINES AND INTERNAL BLOCKS.                *\r\n*              REMOVED ALL UNNECESSARY LABELS FOR REDUCING NAMING     *\r\n*              CONFLICTS FOR THE FUTURE.                              *\r\n*        JUL28 ADDED MORE ONE INPUT PARAMETER OF 'RTNMSG' SUBROUTINE, *\r\n*              WHICH RECORDS THE LENGTH OF MESSAGE CONTENTS.          *\r\n*              MODIFIED ALL PARAMETERS WHERE CALLING THIS SUBROUTINE. *\r\n*              EXPANDED THE MESSAGE LENGTH FROM 80 TO 132 CHARS.      *\r\n***********************************************************************\r\n*PROCESS RENT\r\n*\r\nSORTNAME RSECT ,\r\nSORTNAME AMODE 31\r\nSORTNAME RMODE ANY\r\n*\r\n*        **************************************************************\r\n*        * EYE-CATCHER BLOCK                                          *\r\n*        **************************************************************\r\nENTRYLOG EQU   *\r\n         USING *,R15                    SET TEMPORARY BASE REGISTER\r\n         B     START                    BRANCH AROUND THE EYE-CATCHER\r\n         DC    AL1(L'ICATCH)\r\nICATCH   DC    C'SORTNAME &SYSDATE &SYSTIME'\r\nSTART    DS    0H\r\n         DROP  R15                      DROP R15 LINKAGE\r\n*\r\n*        **************************************************************\r\n*        * SAVE THE REGISTERS' SETTINGS, AND OBTAIN/INITIALIZE/LINK   *\r\n*        * THE DYNAMIC STORAGE AREA(DSA)'S STORAGE.                   *\r\n*        *------------------------------------------------------------*\r\n*        * UPON REGISTERS:                                            *\r\n*        *     R11 -     DSA FOR DCBS                                 *\r\n*        *     R12 -     BASE REGISTER OF THIS PROGRAM                *\r\n*        *     R13 -     DSA FOR VARIABLES                            *\r\n*        **************************************************************\r\nPROLOG   EQU   *\r\n         BAKR  R14,0                    STACK ENTERED PSW AND GPRS/ARS\r\n         LR    R12,R15                  SET R12 AS BASE REGISTER\r\n         USING SORTNAME,R12\r\n*\r\n*        *------------------------------------------------------------*\r\n*        * ALLOCATE A NEW STORAGE AREA FOR VARIABLES DSECT            *\r\n*        *------------------------------------------------------------*\r\n         STORAGE OBTAIN,                OBTAIN VARIABLES STORAGE AREA  +\r\n               LENGTH=DSAVAR_L,         STORAGE LENGTH                 +\r\n               ADDR=(R14),              RETURN ADDRESS IN R14          +\r\n               LOC=ANY,                 LOCATION                       +\r\n               COND=YES                 CONDITION VALUE\r\n         LTR   R15,R15                  CHECK OBTAIN RESULT\r\n         BZ    INITVARA                 BRANCH WHEN OBTAIN SUCCESSFULLY\r\n         LA    R15,EV_STG               SET RETURN VALUE(ALLOC FAILED)\r\n         B     EPILOG                   EXIT PROGRAM WHEN OBTAIN FAILED\r\n*\r\nINITVARA LR    R0,R14                   COPY AS TRANSFER AREA\r\n         LA    R1,DSAVAR_L              SET TRANSFER AREA LENGTH\r\n         XR    R15,R15                  CLEAN R15\r\n         MVCL  R0,R14                   CLEAN DSA STORAGE AREA\r\n         ST    R14,8(,R13)              SAVE HSA POINTER\r\n         MVC   4(4,R14),=C'F1SA'        PUT ACRONYM INTO SAVEAREA TO\r\n*                                       INDICATE STATUS SAVED ON\r\n*                                       LINKAGE STACK\r\n         LR    R13,R14                  PONT TO CURRENT SAVEAREA\r\n         USING (DSAVAR,DSAVAR_E),R13    POINT TO DSA AREA\r\n*\r\n*        *------------------------------------------------------------*\r\n*        * ALLOCATE A NEW STORAGE AREA FOR DCB DSECT                  *\r\n*        *------------------------------------------------------------*\r\n         STORAGE OBTAIN,                OBTAIN DCB STORAGE AREA        +\r\n               LENGTH=DSADCB_L,         STORAGE LENGTH                 +\r\n               ADDR=(R10),              RETURN ADDRESS IN R14          +\r\n               LOC=24,                  LOCATION                       +\r\n               COND=YES                 CONDITION VALUE\r\n         LTR   R15,R15                  CHECK OBTAIN RESULT\r\n         BZ    INITDCBA                 BRANCH WHEN OBTAIN SUCCESSFULLY\r\n         LA    R15,EV_STG               SET RETURN VALUE(ALLOC FAILED)\r\n         B     RLSDSA_V                 EXIT PROGRAM\r\n*\r\nINITDCBA LR    R0,R10                   COPY R10 AS TRANSFER AREA\r\n         LA    R1,DSADCB_L              SET TRANSFER LENGTH\r\n         XR    R11,R11                  CLEAN R11\r\n         MVCL  R0,R10                   CLEAN DSA STORAGE AREA\r\n         LR    R11,R10                  POINT R11 TO DCB DSA AREA\r\n         USING (DSADCB,DSADCB_E),R11    LINK R11 TO DCB DSA AREA\r\n*\r\n*        **************************************************************\r\n*        * COPY AND SORT THE NAME ARRAYS                              *\r\n*        **************************************************************\r\nMAINLINE EQU   *\r\n*\r\n*        *------------------------------------------------------------*\r\n*        * GET PARAMETER LIST                                         *\r\n*        *------------------------------------------------------------*\r\n*        * UPON REGISTERS:                                            *\r\n*        *     R1  -     PARAMETER LIST                               *\r\n*        *     R2  -     PARAMETER DIGITS NUMBER                      *\r\n*        *     R3  -     PARAMETER TEMPORARY SAVE AREA                *\r\n*        *     R4  -     PARAMETER LIST OFFSET/RESULT VALUE WHEN ERROR*\r\n*        *     R5  -     LIMITED RECORDS NUMBER                       *\r\n*        *------------------------------------------------------------*\r\n         EREG  R1,R1                    RESTORE GPR1 FROM STACK\r\n         L     R1,0(,R1)                PARAMETER LIST ADDRESS\r\n         LH    R2,0(,R1)                GET THE HIGH-ORDER BIT\r\n         LTR   R2,R2                    TEST THE PARAMETER LENGTH\r\n         BZ    PARM_NL                  EXIT WHEN PARAMETER IS NULL\r\n         CHI   R2,4                     CHECK PARAMETER'S DIGITS\r\n         BH    PARM_EX                  EXIT WHEN EXCEEDING 4 DIGITS\r\n         LHI   R4,+8                    SET MAXIMUM LENGTH\r\n         SR    R4,R2                    SET OFFSET OF PARAMETER LIST\r\n         LA    R3,DBLFLD                POINT TO START-MOVE POSITION\r\n         LA    R3,1(R3)                 INCREASE POINTER ADDRESS BY ONE\r\n         BCT   R4,*-4                   LOOP TO INCREASE\r\n         MVC   0(*-*,R3),2(R1)          COPY PARAMETER CONTENT\r\n         EX    R2,*-6                   GET WITH SPECIFIED LENGTH\r\n         PACK  DBLFLD,DBLFLD            CONVERT ZONED TO PACKED\r\n         CVB   R5,DBLFLD                CONVERT NUMBER TO BINARY\r\n         CHI   R5,1                     CHECK PARAMETER\r\n         BNL   OPN_IN                   BRANCH WHEN MORE THAN 1\r\n*\r\nPARM_NL  LHI   R5,REC_MAX               SET WITH DEFAULT VALUE\r\n         B     OPN_IN                   BRANCH WHEN MORE THAN 1\r\n*\r\nPARM_EX  LA    R0,EM_08                 GET MESSAGE CONTENTS ADDRESS\r\n         LHI   R1,L'EM_08               GET MESSAGE CONTENTS LENGTH\r\n         BAS   R14,RTNMSG               CALL RTNMSG SUBROUTINE\r\n         LA    R4,EV_PARMI              SET RETURN VALUE(INPUT PARM NG)\r\n         B     RLSDSA_D                 EXIT PROGRAM\r\n*\r\n*        *------------------------------------------------------------*\r\n*        * COPY THE RECORDS TO SAVE AREA FROM INPUT FILE              *\r\n*        *------------------------------------------------------------*\r\n*        * UPON REGISTERS:                                            *\r\n*        *     R1  -     PARAMETER(FOR INTERNAL SUBROUTINE)           *\r\n*        *     R2  -     BLOCK RECORDS NUMBER                         *\r\n*        *     R3  -     TOTAL RECORDS NUMBER                         *\r\n*        *     R4  -     NEW RECORD ADDRESS/RESULT VALUE WHEN ERROR   *\r\n*        *     R5  -     LIMITED RECORDS NUMBER                       *\r\n*        *     R10 -     PARM_ALC VARIABLE AREA POINTER               *\r\n*        *------------------------------------------------------------*\r\nOPN_IN   LHI   R1,0                     SET OPEN-CLOSE FLAG\r\n         BAS   R14,RTNOPN               BRANCH TO RTNOPN SUBROUTINE\r\n         LTR   R15,R15                  TEST OPENED RESULT\r\n         BZ    INITCPY                  BRANCH WHEN OPENED SUCCESSFULLY\r\n         LR    R4,R15                   SAVE RETURN VALUE\r\n         B     RLSDSA_D                 EXIT PROGRAM\r\n*\r\nINITCPY  XR    R2,R2                    INITIALIZE BLOCK RECORDS NUMBER\r\n         XR    R3,R3                    INITIALIZE TOTAL RECORDS NUMBER\r\n         XR    R4,R4                    INITIALIZE NEW RECORD ADDRESS\r\n         USING (PALC,PALC_E),R10        POINT TO PALC-DSECT STRUCTURE\r\n         LA    R10,PARM_ALC             POINT TO PARM_ALC VARIABLE AREA\r\n*\r\nGETREC   GET   INDCB_X,REC_LN           GET ONE LINE RECORD\r\n         AHI   R2,+1                    INCREASE BLOCK RECORDS NUMBER\r\n         AHI   R3,+1                    INCREASE RECORDS NUMBER\r\n         CR    R3,R5                    CHECK RECORDS NUMBER\r\n         BH    CLS_IN                   EXIT WHEN BEYOND MAXIMUM NUMBER\r\n         CHI   R3,1                     CHECK RECORDS NUMBER\r\n         BNH   ALCREC                   ALLOCATE STORAGE AREA FOR FIRST\r\n         CHI   R2,REC_NUMB              CHECK BLOCK RECORDS NUMBER\r\n         BNH   CPYREC                   EXPAND STORAGE AREA FOR MORE\r\n*\r\nALCREC   LR    R1,R10                   SET PARAMETERS LIST\r\n         BAS   R14,RTNALC               CALL RTNALC SUBROUTINE\r\n         LR    R4,R15                   GET NEW RECORD ADDRESS\r\n         LHI   R2,1                     RESET BLOCK RECORDS NUMBER\r\n*\r\nCPYREC   MVC   0(UREC_L,R4),REC_LN      COPY TO STORAGE AREA\r\n         LA    R4,UREC_L(R4)            MOVE POINTER TO NEXT RECORD\r\n         B     GETREC                   COPY UNTIL EOF\r\n*\r\nCLS_IN   LHI   R1,0                     SET OPEN-CLOSE FLAG\r\n         BAS   R14,RTNCLS               BRANCH TO RTNCLS SUBROUTINE\r\n         CR    R3,R5                    CHECK RECORDS NUMBER\r\n         BH    EXC_MAX                  EXIT WHEN EXCEED MAXIMUM NUMBER\r\n         CHI   R3,1                     CHECK RECORDS NUMBER\r\n         BNL   CALLQSRT                 START TO SORT WHEN MORE THAN 1\r\n         LA    R0,EM_05                 GET MESSAGE CONTENTS ADDRESS\r\n         LHI   R1,L'EM_05               GET MESSAGE CONTENTS LENGTH\r\n         BAS   R14,RTNMSG               CALL RTNMSG SUBROUTINE\r\n         LA    R15,EV_NULL              SET RETURN VALUE(RECS NULL)\r\n         B     RLSDSA                   EXIT PROGRAM\r\n*\r\nEXC_MAX  LA    R0,EM_07                 GET MESSAGE CONTENTS ADDRESS\r\n         LHI   R1,L'EM_07               GET MESSAGE CONTENTS LENGTH\r\n         BAS   R14,RTNMSG               CALL RTNMSG SUBROUTINE\r\n         LA    R15,EV_CPY               SET RETURN VALUE(RECS EXCEED)\r\n         B     RLSDSA                   EXIT PROGRAM\r\n*\r\n*        *------------------------------------------------------------*\r\n*        * SORT THE RECORDS BY USING 'QSORT' MODULE                   *\r\n*        *------------------------------------------------------------*\r\n*        * UPON REGISTERS:                                            *\r\n*        *     R1  -     PARAMETER(FOR INTERNAL SUBROUTINE)           *\r\n*        *     R2  -     PARAMETERS AREA FOR QSORT MODULE             *\r\n*        *     R3  -     TOTAL RECORDS NUMBER                         *\r\n*        *     R4  -     CALLED RESULT(TEMPORARY SAVING)              *\r\n*        *------------------------------------------------------------*\r\nCALLQSRT EQU   *\r\n         USING (PARMS,PARMS_E),R2       POINT TO PARMS-DSECT STRUCTURE\r\n         LA    R2,PARM_SRT              SET PARAMETERS AREA\r\n         MVC   BUFADDR,RECADDR          SET RECORDS AREA ADDRESS\r\n         ST    R3,RECOUNT               SET TOTAL RECORDS NUMBER\r\n         DROP  R2                       DROP THE LINKAGE TO PARMS-DSECT\r\n         LOAD  EP=QSORT                 LOAD QSORT MODULE\r\n         LR    R15,R0                   SET QSORT ENTRY POINT\r\n         MVC   CALL_X,CALL_I            COPY MACRO CALL LISTFORM\r\n         CALL  (15),                    CALL QSORT MODULE              +\r\n               ((R2)),                  PARAMETER LIST                 +\r\n               MF=(E,CALL_X)            EXECUTE FORM\r\n         LR    R4,R15                   TEMPORARY SAVE CALL RESULT\r\n         DELETE EP=QSORT                UNLOAD QSORT MODULE\r\n         LTR   R4,R4                    TEST QSORT RESULT\r\n         BZ    OPN_OUT                  BRANCH TO OUTPUT SORTED RECORDS\r\n         LA    R0,EM_06                 GET MESSAGE CONTENTS ADDRESS\r\n         LHI   R1,L'EM_06               GET MESSAGE CONTENTS LENGTH\r\n         BAS   R14,RTNMSG               CALL RTNMSG SUBROUTINE\r\n         LA    R15,EV_PARM              SET RETURN VALUE(INVALID PARAM)\r\n         B     RLSDSA                   EXIT PROGRAM\r\n*\r\n*        *------------------------------------------------------------*\r\n*        * PRINT OUT THE SORTED RECORDS                               *\r\n*        *------------------------------------------------------------*\r\n*        * UPON REGISTERS:                                            *\r\n*        *     R1  -     PARAMETER(FOR INTERNAL SUBROUTINE)           *\r\n*        *     R2  -     RECORDS AREA ADDRESS                         *\r\n*        *     R3  -     TOTAL RECORDS NUMBER                         *\r\n*        *------------------------------------------------------------*\r\nOPN_OUT  L     R2,RECADDR               GET RECORDS AREA ADDRESS\r\n         LHI   R1,1                     SET OPEN-CLOSE FLAG\r\n         BAS   R14,RTNOPN               BRANCH TO RTNOPN SUBROUTINE\r\n         LTR   R15,R15                  TEST OPENED RESULT\r\n         BZ    PRTREC                   BRANCH WHEN OPENED SUCCESSFULLY\r\n         B     RLSDSA                   EXIT PROGRAM\r\n*\r\nPRTREC   MVC   REC_LN(UREC_L),0(R2)     MOVE ONE LINE TO SAVE AREA\r\n         PUT   OUTDCB_X,REC_LN          OUTPUT RECORD TO OUTPUT FILE\r\n         LA    R2,UREC_L(R2)            POINT TO THE NEXT RECORD\r\n         BCT   R3,PRTREC                LOOP TO PRINT SORTED RECORDS\r\n*\r\nCLS_OUT  LHI   R1,1                     SET OPEN-CLOSE FLAG\r\n         BAS   R14,RTNCLS               BRANCH TO RTNCLS SUBROUTINE\r\n*\r\n*        **************************************************************\r\n*        * RELEASE THE DSA AREA AND RESTORE THE REGISTERS' SETTINGS.  *\r\n*        *------------------------------------------------------------*\r\n*        * UPON REGISTERS:                                            *\r\n*        *     R2  -     RECORDS AREA ADDRESS                         *\r\n*        *     R3  -     TOTAL RECORDS NUMBER                         *\r\n*        *     R4  -     RESULT VALUE(FOR TEMPORARY SAVING)           *\r\n*        *     R11 -     DSA FOR DCBS                                 *\r\n*        *     R13 -     DSA FOR VARIABLES                            *\r\n*        **************************************************************\r\nRLSDSA   EQU   *\r\n         LR    R4,R15                   TEMPORARY SAVE R15\r\n*        *------------------------------------------------------------*\r\n*        * RELEASE ALOCATION STORAGE AREA FOR RECORDS                 *\r\n*        *------------------------------------------------------------*\r\n         L     R2,RECADDR               GET RECORDS AREA ADDRESS\r\n         L     R3,RECAREAL              GET RECORDS AREA LENGTH\r\n         STORAGE RELEASE,               RELEASE RECORDS STORAGE AREA   +\r\n               LENGTH=(R3),             STORAGE LENGTH                 +\r\n               ADDR=(R2)                RETURN ADDRESS\r\n*\r\n*        *------------------------------------------------------------*\r\n*        * RELEASE ALOCATION STORAGE AREA FOR DCB                     *\r\n*        *------------------------------------------------------------*\r\nRLSDSA_D STORAGE RELEASE,               RELEASE DCB STORAGE AREA       +\r\n               LENGTH=DSADCB_L,         STORAGE LENGTH                 +\r\n               ADDR=(R11)               RETURN ADDRESS IN R11\r\n*\r\n*        *------------------------------------------------------------*\r\n*        * RELEASE ALOCATION STORAGE AREA FOR VARIABLES               *\r\n*        *------------------------------------------------------------*\r\nRLSDSA_V STORAGE RELEASE,               RELEASE VARIABLES STORAGE AREA +\r\n               LENGTH=DSAVAR_L,         STORAGE LENGTH                 +\r\n               ADDR=(R13)               RETURN ADDRESS IN R13\r\n         LR    R15,R4                   RESTORE RETURN VALUE\r\n*\r\nEPILOG   PR    ,                        EXIT TO CALLER'S PROGRAM\r\n*\r\n***********************************************************************\r\n* FUNCTION:    OPEN A INPUTTING OR OUTPUTTING FILE.                   *\r\n*---------------------------------------------------------------------*\r\n* UPON REGISTERS:                                                     *\r\n*    R1  -     (INPUT)PARAMETERS LIST                                 *\r\n*    R2  -     OPEN-CLOSE FLAG(0:INPUT,1:OUTPUT)                      *\r\n*    R15 -     (OUTPUT)OPEN RESULT(0:SUCCEED,EV_OPN:FAILED)           *\r\n***********************************************************************\r\nRTNOPN   EQU   *\r\n*\r\n         BAKR  R14,0                    STACK ENTERED PSW AND GPRS/ARS\r\n         LR    R2,R1                    GET OPEN-CLOSE FLAG\r\n         MVC   OPNCLS_X,OPNCLS_I        COPY MACRO OPEN_CLOSE LISTFORM\r\n         CHI   R2,0                     CHECK OPEN-CLOSE FLAG\r\n         BNE   OPNOUT                   BRANCH WHEN OPENING OUTPUT FILE\r\n         MVC   INDCB_X,INDCB_I          COPY INDCB TO DSA AREA\r\n         OPEN  (INDCB_X,),              DCB OF INPUT FILE              +\r\n               MODE=31,                 RUN MODE                       +\r\n               MF=(E,OPNCLS_X)          EXECUTE FORM\r\n         B     OPNTST                   BRANCH TO TEST OPENED RESULT\r\n*\r\nOPNOUT   MVC   OUTDCB_X,OUTDCB_I        COPY OUTDCB TO DSA AREA\r\n         OPEN  (OUTDCB_X,(OUTPUT)),     DCB OF OUTPUT FILE             +\r\n               MODE=31,                 RUN MODE                       +\r\n               MF=(E,OPNCLS_X)          EXECUTE FORM\r\n*\r\nOPNTST   LTR   R15,R15                  TEST OPENED RESULT\r\n         BZ    EXTOPN                   BRANCH WHEN OPENED SUCCESSFULLY\r\n         CHI   R2,0                     CHECK OPEN-CLOSE FLAG\r\n         BNE   OPNMVC                   BRANCH WHEN OPENING OUTPUT FILE\r\n         LA    R0,EM_01                 GET MESSAGE CONTENTS ADDRESS\r\n         LHI   R1,L'EM_01               GET MESSAGE CONTENTS LENGTH\r\n         B     OPNMSG                   EXIT SUBROUTINE\r\n*\r\nOPNMVC   LA    R0,EM_02                 GET MESSAGE CONTENTS ADDRESS\r\n         LHI   R1,L'EM_02               GET MESSAGE CONTENTS LENGTH\r\n*\r\nOPNMSG   BAS   R14,RTNMSG               CALL RTNMSG SUBROUTINE\r\n         LA    R15,EV_OPN               SET RETURN VALUE(OPEN FAILED)\r\n*\r\nEXTOPN   PR    ,                        EXIT TO CALLER'S PROGRAM\r\n*\r\n***********************************************************************\r\n* FUNCTION:    CLOSE A INPUTTING OR OUTPUTTING FILE.                  *\r\n*---------------------------------------------------------------------*\r\n* UPON REGISTERS:                                                     *\r\n*    R1  -     (INPUT)PARAMETERS LIST                                 *\r\n*    R2  -     OPEN-CLOSE FLAG(0:INPUT,1:OUTPUT)                      *\r\n*    R15 -     (OUTPUT)CLOSE RESULT(0:SUCCEED,EV_CLS:FAILED)          *\r\n***********************************************************************\r\nRTNCLS   EQU   *\r\n*\r\n         BAKR  R14,0                    STACK ENTERED PSW AND GPRS/ARS\r\n         LR    R2,R1                    GET OPEN-CLOSE FLAG\r\n         MVC   OPNCLS_X,OPNCLS_I        COPY MACRO OPEN_CLOSE LISTFORM\r\n         CHI   R2,0                     CHECK OPEN-CLOSE FLAG\r\n         BNE   CLSOUT                   BRANCH WHEN CLOSING OUTPUT FILE\r\n         CLOSE (INDCB_X,),              DCB OF INPUT FILE              +\r\n               MODE=31,                 RUN MODE                       +\r\n               MF=(E,OPNCLS_X)          EXECUTE FORM\r\n         B     CLSTST                   BRANCH TO TEST CLOSED RESULT\r\n*\r\nCLSOUT   CLOSE (OUTDCB_X,),             DCB OF OUTPUT FILE             +\r\n               MODE=31,                 RUN MODE                       +\r\n               MF=(E,OPNCLS_X)          EXECUTE FORM\r\n*\r\nCLSTST   LTR   R15,R15                  TEST CLOSED RESULT\r\n         BZ    EXTCLS                   BRANCH WHEN CLOSED SUCCESSFULLY\r\n         CHI   R2,0                     CHECK OPEN-CLOSE FLAG\r\n         BNE   CLSMVC                   BRANCH WHEN CLOSING OUTPUT FILE\r\n         LA    R0,EM_03                 GET MESSAGE CONTENTS ADDRESS\r\n         LHI   R1,L'EM_03               GET MESSAGE CONTENTS LENGTH\r\n         B     CLSMSG                   EXIT SUBROUTINE\r\n*\r\nCLSMVC   LA    R0,EM_04                 GET MESSAGE CONTENTS ADDRESS\r\n         LHI   R1,L'EM_04               GET MESSAGE CONTENTS LENGTH\r\n*\r\nCLSMSG   BAS   R14,RTNMSG               CALL RTNMSG SUBROUTINE\r\n         LA    R15,EV_CLS               SET RETURN VALUE(CLOSE FAILED)\r\n*\r\nEXTCLS   PR    ,                        EXIT TO CALLER'S PROGRAM\r\n*\r\n***********************************************************************\r\n* FUNCTION:    ALLOCATION OR EXPAND THE RECORDS AREA.                 *\r\n*---------------------------------------------------------------------*\r\n* UPON REGISTERS:                                                     *\r\n*    R1  -     (INPUT)PARAMETERS LIST                                 *\r\n*    R2  -     OLD RECORDS AREA ADDRESS                               *\r\n*    R3  -     OLD RECORDS AREA LENGTH                                *\r\n*    R4  -     NEW RECORDS AREA ADDRESS                               *\r\n*    R5  -     NEW RECORDS AREA LENGTH                                *\r\n*    R6  -     NEW RECORD  ADDRESS                                    *\r\n*    R7  -     NEW RECORDS AREA LENGTH(FOR TEMPORARY SAVING)          *\r\n*    R8  -     OLD RECORDS AREA LENGTH(FOR TEMPORARY SAVING)          *\r\n*    R9  -     PALC DSECT STRUCTURE POINTER                           *\r\n***********************************************************************\r\nRTNALC   EQU   *\r\n*\r\n         BAKR  R14,0                    STACK ENTERED PSW AND GPRS/ARS\r\n*\r\nALCPARM  USING (PALC,PALC_E),R9         POINT TO PALC DSECT STRUCTURE\r\n         LR    R9,R1                    POINT TO PARAMETERS LIST\r\n         L     R2,ALCPARM.RECADDR       GET RECORDS AREA ADDRESS\r\n         L     R3,ALCPARM.RECAREAL      GET RECORDS AREA LENGTH\r\n         LR    R6,R4                    GET RECORD ADDRESS\r\n*\r\n*        **************************************************************\r\n*        * ALLOCATE A NEW STORAGE AREA                                *\r\n*        **************************************************************\r\n         SR    R6,R2                    GET RECORDS LENGTH\r\n         LR    R5,R3                    COPY OLD RECORDS AREA LENGTH\r\n         AHI   R5,REC_LENB              SAVE NEW RECORDS AREA LENGTH\r\n         STORAGE OBTAIN,                OBTAIN NEW RECORDS AREA        +\r\n               LENGTH=(R5),             RECORDS AREA LENGTH            +\r\n               ADDR=(R4),               RECORDS AREA ADDRESS           +\r\n               LOC=ANY,                 LOCATION                       +\r\n               COND=YES                 CONDITION VALUE\r\n         LTR   R15,R15                  CHECK OBTAIN RESULT\r\n         BZ    CHKALC                   BRANCH WHEN OBTAIN SUCCESSFULLY\r\n         LA    R0,EM_00                 GET MESSAGE CONTENTS ADDRESS\r\n         LHI   R1,L'EM_00               GET MESSAGE CONTENTS LENGTH\r\n         BAS   R14,RTNMSG               CALL RTNMSG SUBROUTINE\r\n         B     EXTALC                   EXIT SUBROUTINE\r\n*\r\n*        **************************************************************\r\n*        * CHECK ALLOCATED RESULT AND COPY RECORDS TO NEW STORAGE     *\r\n*        **************************************************************\r\nCHKALC   CHI   R3,0                     CHECK ALLOCATION LENGTH\r\n         BNH   SAVALC                   BRANCH WHEN FIRST ALLOCATION\r\n         LR    R7,R5                    SAVE NEW ALLOCATION LENGTH\r\n         LR    R8,R3                    SAVE OLD ALLOCATION LENGTH\r\n         LR    R5,R3                    SET COPY LENGTH FOR MOVING\r\n         MVCL  R4,R2                    COPY RECORDS TO NEW ALLOCATION\r\n         LR    R5,R7                    RESTORE NEW ALLOCATION LENGTH\r\n         LR    R3,R8                    RESTORE OLD ALLOCATION LENGTH\r\n         SR    R4,R3                    RESTORE NEW ALLOCATION ADDRESS\r\n         SR    R2,R3                    RESTORE OLD ALLOCATION ADDRESS\r\n         STORAGE RELEASE,               RELEASE OLD RECORDS AREA       +\r\n               LENGTH=(R3),             RECORDS AREA LENGTH            +\r\n               ADDR=(R2)                RECORDS AREA ADDRESS\r\n*\r\n*        **************************************************************\r\n*        * SAVE ALLOCATED RECORDS SAVE AREA ADDRESS AND LENGTH        *\r\n*        **************************************************************\r\nSAVALC   ST    R4,ALCPARM.RECADDR       SAVE NEW RECORDS AREA ADDRESS\r\n         ST    R5,ALCPARM.RECAREAL      SAVE NEW RECORDS AREA LENGTH\r\n         AR    R6,R4                    GET  NEW RECORD ADDRESS\r\n         LR    R15,R6                   SAVE NEW RECORD ADDRESS\r\n*\r\nEXTALC   PR    ,                        EXIT TO CALLER'S PROGRAM\r\n         DROP  ALCPARM                  DROP PALC DSECT STRUCTURE\r\n*\r\n***********************************************************************\r\n* FUNCTION:    DISPLAY THE MESSAGE CONTENTS                           *\r\n*---------------------------------------------------------------------*\r\n* UPON REGISTERS:                                                     *\r\n*    R0  -     (INPUT)MESSAGE CONTENTS ADDRESS                        *\r\n*    R1  -     (INPUT)MESSAGE CONTENTS LENGTH                         *\r\n*    R2  -     MESSAGE BUFFER POINTER                                 *\r\n*    R3  -     MESSAGE CONTENTS LENGTH FOR COPYING CONTENTS           *\r\n***********************************************************************\r\nRTNMSG   EQU   *\r\n*\r\n         BAKR  R14,0                    STACK ENTERED PSW AND GPRS/ARS\r\n*\r\n*        **************************************************************\r\n*        * INITIALIZE MESSAGE BUFFER AND SET CONTENTS & PREFIX NAME   *\r\n*        **************************************************************\r\n         XC    MSG_BF,MSG_BF            INITIALIZE MESSAGE BUFFER\r\n         LA    R2,MSG_BF+MSG_LT         POINT TO PREFIX NAME\r\n         MVC   0(MSG_LA,R2),MSG_PF      COPY PREFIX NAME TO BUFFER\r\n         LA    R2,MSG_LA(,R2)           POINT TO CONTENTS\r\n         LR    R3,R1                    TARGET AREA LENGTH FOR COPYING\r\n         MVCL  R2,R0                    COPY CONTENTS TO MESSAGE BUFFER\r\n*\r\n*        **************************************************************\r\n*        * GET RUN-TIME AND FILL INTO MESSAGE BUFFER                  *\r\n*        **************************************************************\r\n         MVC   TIME_X,TIME_I            COPY MACRO TIME LISTFORM\r\n         TIME  DEC,                     TIME TYPE                      +\r\n               TIMEVAL,                 OUTPUT AREA                    +\r\n               LINKAGE=SYSTEM,          DEC                            +\r\n               DATETYPE=YYYYMMDD,       DATE TYPE                      +\r\n               MF=(E,TIME_X)            EXECUTE FORM\r\n         LTR   R15,R15                  CHECK RETURN VALUE\r\n         BNZ   DSPMSG                   BRANCH TO DISPLAY MESSAGE EVEN\r\n*                                       IF GETTING-TIME FAILED\r\n         XC    DBLFLD,DBLFLD            INITIALIZE DBLFLD VARIABLE\r\n         MVC   DBLFLD(4),TIMEVAL+8      GET 'YYYYMMDD'\r\n         MVC   DBLFLD+4(3),TIMEVAL      GET 'HHMMSS'\r\n         MVC   TIMEVAL,MSG_PTN          GET MESSAGE PATTERN\r\n         ED    TIMEVAL,DBLFLD           FORMAT TIME VALUE\r\n         MVC   MSG_BF(MSG_LT),TIMEVAL   SET TIME INFORMATION\r\n*\r\n*        **************************************************************\r\n*        * DISPLAY THE MESSAGE CONTNETS BY BY USING WTO MACRO         *\r\n*        **************************************************************\r\nDSPMSG   MVC   MSG_AD,=AL2(L'MSG_BF)    GET MESSAGE AREA ADDRESS\r\n         MVC   WTO_X,WTO_I              COPY MACRO WTO LISTFORM\r\n         WTO   TEXT=MSG_AD,             PRINT OUT ERROR MESSAGES       +\r\n               ROUTCDE=11,              ROUTING CODE                   +\r\n               MF=(E,WTO_X)             EXECUTE FORM\r\n*\r\nEXTMSG   PR    ,                        EXIT TO CALLER'S PROGRAM\r\n*\r\n***********************************************************************\r\n* CONSTANTS AND DATA AREAS                                            *\r\n***********************************************************************\r\n*        **************************************************************\r\n*        * RECORDS LENGTH, LIMITS, AND BLOCK DEFINATION               *\r\n*        **************************************************************\r\nREC_MAX  EQU   9999                     TOTAL RECORDS MAXIMUM NUMBER\r\nREC_LENB EQU   16*1024                  RECORDS LENGTH PER BLOCK(16K)\r\nREC_NUMB EQU   REC_LENB/UREC_L          RECORDS NUMBER PER BLOCK\r\nREC_LENL EQU   80                       RECORDS LENGTH PER LINE\r\n*\r\n*        **************************************************************\r\n*        * MESSAGES STRUCTURE AND LENGTH DEFINATION                   *\r\n*        * FORMAT            : DATE&TIME+PREFIX_NAME+MESSAGE_CONTENTS *\r\n*        * MAXIMUM LENGTH    : 'MSG_L' (DEFAULT VALUE IS 132)         *\r\n*        *------------------------------------------------------------*\r\n*        * SYNTAX DATE&TIME  : '[YYYY/MM/DD HH:MM:SS]'(FIXED 21 CHARS)*\r\n*        *        PREFIX_NAME: 'XXXXX-ERR:'(FLOATING 6-13 CHARS)      *\r\n*        *        CONTENTS   : 'ZZZZZ.'(FLOATING 2-105 CHARS)         *\r\n*        * F.E.- '[2012/07/10 12:34:56]SORTNAME_ERR:STORAGE FAILED.'  *\r\n*        **************************************************************\r\nMSG_L    EQU   132                      TOTAL MESSAGE LENGTH\r\n*                                       TIME INFORMATION PATTERN\r\n*                                       FORMAT:'[YYYY/MM/DD HH:MM:SS]'\r\nMSG_PTN  DC    X'4A202020206120206120204020207A20207A20205A'\r\nMSG_LT   EQU   *-MSG_PTN                SYSTEM TIME INFORMATION LENGTH\r\nMSG_PF   DC    C'SORTNAME-ERR:'         MESSAGE PREFIX NAME\r\nMSG_LA   EQU   *-MSG_PF                 MESSAGE PREFIX NAME LENGTH\r\nMSG_LC   EQU   MSG_L-MSG_LT-MSG_LA      MESSAGE CONTENT LENGTH\r\n*\r\n*        **************************************************************\r\n*        * ERROR VALUES(EV_XXX)                                       *\r\n*        **************************************************************\r\nEV_STG   EQU   4                        STORAGE FAILED\r\nEV_PARM  EQU   8                        INVALID PARAMETER @QSORT MODULE\r\nEV_CPY   EQU   12                       COPY RECORDS FAILED(OR EXCEED)\r\nEV_OPN   EQU   16                       OPEN INPUT/OUTPUT FILE FAILED\r\nEV_CLS   EQU   20                       CLOSE INPUT/OUTPUT FILE FAILED\r\nEV_NULL  EQU   24                       NO DATA IN INPUT FILE\r\nEV_PARMI EQU   28                       INVALID INPUTTED PARAMETER\r\n*\r\n*        **************************************************************\r\n*        * ERROR ADDRESSES(EA_XX) AND ERROR MESSAGES(EM_XX)           *\r\n*        **************************************************************\r\nEM_00    DC    C'STORAGE ALLOCATION FAILED.'\r\nEM_01    DC    C'FAILED TO OPEN INPUT FILE.'\r\nEM_02    DC    C'FAILED TO OPEN OUTPUT FILE.'\r\nEM_03    DC    C'FAILED TO CLOSE INPUT FILE.'\r\nEM_04    DC    C'FAILED TO CLOSE OUTPUT FILE.'\r\nEM_05    DC    C'NO DATA IN INPUT FILE.'\r\nEM_06    DC    C'INVALID PARAMETER WHEN CALLING QSORT MODULE.'\r\nEM_07    DC    C'TOO MANY RECORDS WHICH EXCEED UPPER LIMIT.'\r\nEM_08    DC    C'THE INPUT PARAMETER IS INVALID.'\r\n*\r\n*        **************************************************************\r\n*        * INPUT AND OUTPUT DATA CONTROL BLOCK(DCB)'S DEFINATION      *\r\n*        **************************************************************\r\nINDCB_I  DCB   DDNAME=SYSUT1,           INPUT DATA SET NAME            +\r\n               DSORG=PS,                DATA SET ORGANIZATION          +\r\n               MACRF=GM,                MACRO TYPE & TRANSMITTAL MODE  +\r\n               RECFM=FB,                RECORD FORMAT                  +\r\n               LRECL=REC_LENL,          RECORD LENGTH                  +\r\n               DCBE=INDCBE              INPUT DCBE ADDRESS\r\n*\r\nINDCB_L  EQU   *-INDCB_I                LENGTH OF INPUT DCB\r\n*\r\nINDCBE   DCBE  RMODE31=BUFF,            GET BUFFER ABOVE THE 16MB LINE +\r\n               EODAD=CLS_IN,            RETURN ADDRESS WHEN EOF        +\r\n               SYNAD=CLS_IN             RETURN ADDRESS WHEN ERROR\r\n*\r\nOUTDCB_I DCB   DDNAME=SYSUT2,           OUTPUT DATA SET NAME           +\r\n               DSORG=PS,                DATA SET ORGANIZATION          +\r\n               MACRF=PM,                MACRO TYPE & TRANSMITTAL MODE  +\r\n               RECFM=FB,                RECORD FORMAT                  +\r\n               LRECL=REC_LENL,          RECORD LENGTH                  +\r\n               DCBE=OUTDCBE             OUTPUT DCBE ADDRESS\r\n*\r\nOUTDCB_L EQU   *-OUTDCB_I               LENGTH OF OUTPUT DCB\r\n*\r\nOUTDCBE  DCBE  RMODE31=BUFF,            GET BUFFER ABOVE THE 16MB LINE +\r\n               SYNAD=CLS_OUT            RETURN ADDRESS WHEN ERROR\r\n*\r\n*        **************************************************************\r\n*        * MACRO'S LISTFORM DEFINATION                                *\r\n*        **************************************************************\r\nOPNCLS_I OPEN  (,),MODE=31,MF=L         MACRO OPEN-CLOSE LISTFORM\r\nOPNCLS_L EQU   *-OPNCLS_I               MACRO OPEN-CLOSE LENGTH\r\n*\r\nCALL_I   CALL  ,(),MF=L                 MACRO CALL LISTFORM\r\nCALL_L   EQU   *-CALL_I                 MACRO CALL LENGTH\r\n*\r\nWTO_I    WTO   TEXT=,ROUTCDE=,MF=L      MACRO WTO LISTFORM\r\nWTO_L    EQU   *-WTO_I                  MACRO WTO LENGTH\r\n*\r\nTIME_I   TIME  LINKAGE=SYSTEM,          MACRO TIME LISTFORM            +\r\n               DATETYPE=,                                              +\r\n               MF=L\r\nTIME_L   EQU   *-TIME_I                 MACRO TIME LENGTH\r\n*\r\n***********************************************************************\r\n* DYNAMIC STORAGE AREA FOR VARIABLES                                  *\r\n***********************************************************************\r\nDSAVAR   DSECT ,\r\n*\r\n*        **************************************************************\r\n*        * TEMPORARY SAVE AREA OR INTERNAL VARIABLES' DEFINATION      *\r\n*        **************************************************************\r\nSAVEAREA DS    18F                      SAVE AREA FOR ALL REGISTERS\r\nREC_LN   DS    CL(REC_LENL)             SAVE AREA FOR ONE LINE RECORD\r\nTIMEVAL  DS    CL(MSG_LT)               SYSTEM TIME INFORMATION\r\nPARM_SRT DS    XL(PARMS_L)              PARAMETER FOR QSORT MODULE\r\nPARM_ALC DS    XL(PALC_L)               PARAMETER FOR RTNALC SUBROUTINE\r\nDBLFLD   DS    D                        DOUBLE FIELD FOR CONVERSION\r\n*\r\n*        **************************************************************\r\n*        * MESSAGES BUFFER AND ADDRESS                                *\r\n*        **************************************************************\r\nMSG_AD   DS    H                        MESSAGE ADDRESS\r\nMSG_BF   DS    CL(MSG_L)                MESSAGE BUFFER\r\n*\r\n*        **************************************************************\r\n*        * MACRO EXECUTE FORM STORAGE AREA                            *\r\n*        **************************************************************\r\nOPNCLS_X DS    XL(OPNCLS_L)             MACRO OPEN-CLOSE STORAGE AREA\r\nCALL_X   DS    XL(CALL_L)               MACRO CALL STORAGE AREA\r\nWTO_X    DS    XL(WTO_L)                MACRO WTO STORAGE AREA\r\nTIME_X   DS    XL(TIME_L)               MACRO TIME STORAGE AREA\r\n*\r\nDSAVAR_E EQU   *                        END OF VARIABLES DSA AREA\r\nDSAVAR_L EQU   DSAVAR_E-DSAVAR          LENGTH OF VARIABLES DSA AREA\r\n*\r\n***********************************************************************\r\n* DYNAMIC STORAGE AREA FOR DCB                                        *\r\n***********************************************************************\r\nDSADCB   DSECT ,\r\n*\r\nINDCB_X  DS    CL(INDCB_L)              COPY AREA FOR INDCB_I\r\nOUTDCB_X DS    CL(OUTDCB_L)             COPY AREA FOR OUTDCB_I\r\n*\r\nDSADCB_E EQU   *                        END OF DCB DSA AREA\r\nDSADCB_L EQU   DSADCB_E-DSADCB          LENGTH OF DCB DSA AREA\r\n*\r\n***********************************************************************\r\n* PARAMETERS STRUCTURE FOR RTNALC INTERNAL SUBROUTINE                 *\r\n***********************************************************************\r\nPALC     DSECT ,\r\n*\r\nRECADDR  DS    A                        RECORDS AREA ADDRESS\r\nRECAREAL DS    F                        RECORDS AREA LENGTH\r\n*\r\nPALC_E   EQU   *                        END OF PALC AREA\r\nPALC_L   EQU   PALC_E-PALC              LENGTH OF PALC AREA\r\n*\r\n***********************************************************************\r\n* EXTERNAL MACROS INCLUSION                                           *\r\n***********************************************************************\r\nUREC     MUREC ,                        RECORD CONTENTS STRUCTURE\r\nPARMS    MPARMS ,                       EXTERNAL PARAMETER(S) STRUCTURE\r\n*\r\n***********************************************************************\r\n* REGISTERS/DCBD DECLARATION AND PROGRAM END                          *\r\n***********************************************************************\r\n         DROP  R10                      DROP THE LINKAGE TO PALC-DSECT\r\n         DROP  R11                      DROP R11 LINKAGE\r\n         DROP  R13                      DROP R13 LINKAGE\r\n         YREGS ,\r\n         DCBD  DSORG=PS,DEVD=(DA,TA)\r\n         END   ,\r\n",
  "language": "hlasm",
  "mtime": "hh:mm:ss"
}